
operationmodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08000d88  08000d88  00010d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e64  08000e64  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000e64  08000e64  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e64  08000e64  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e68  08000e68  00010e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08000ed0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08000ed0  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002183  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005cc  00000000  00000000  00022217  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  000227e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f8  00000000  00000000  00022918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002998  00000000  00000000  00022a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000120b  00000000  00000000  000253a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000090f0  00000000  00000000  000265b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f6a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000097c  00000000  00000000  0002f720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d70 	.word	0x08000d70

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000d70 	.word	0x08000d70

08000204 <GenerateInterrupt>:


#include <stdio.h>

void GenerateInterrupt(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	uint32_t* pSTIR= (uint32_t*)0xE000EF00;
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <GenerateInterrupt+0x2c>)
 800020c:	607b      	str	r3, [r7, #4]
	uint32_t* pISER0= (uint32_t*)0xE000E100;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <GenerateInterrupt+0x30>)
 8000210:	603b      	str	r3, [r7, #0]

	//Enable IRQ3 Interrupt
	*pISER0 |= 1<<3;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0208 	orr.w	r2, r3, #8
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	601a      	str	r2, [r3, #0]

	//Generate Software interrupt for IRQ3
	*pSTIR = (3 &0x1FF);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2203      	movs	r2, #3
 8000222:	601a      	str	r2, [r3, #0]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000ef00 	.word	0xe000ef00
 8000234:	e000e100 	.word	0xe000e100

08000238 <SwitchAccessToUnprivileged>:

void SwitchAccessToUnprivileged(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

	/*1- Read control register */
	__asm volatile("MRS R0, CONTROL");
 800023c:	f3ef 8014 	mrs	r0, CONTROL

	/*2- Modify , oring with one */
	__asm volatile("ORR R0,#0x01");
 8000240:	f040 0001 	orr.w	r0, r0, #1

	/*3- write new value into control */
	__asm volatile("MSR CONTROL, R0");
 8000244:	f380 8814 	msr	CONTROL, r0

}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
	...

08000254 <main>:

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	printf("In Thread mode, before interrupt\n");
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <main+0x1c>)
 800025a:	f000 f97d 	bl	8000558 <puts>

	SwitchAccessToUnprivileged();
 800025e:	f7ff ffeb 	bl	8000238 <SwitchAccessToUnprivileged>

	GenerateInterrupt();
 8000262:	f7ff ffcf 	bl	8000204 <GenerateInterrupt>

	printf("In Thread mode, after interrupt\n");
 8000266:	4803      	ldr	r0, [pc, #12]	; (8000274 <main+0x20>)
 8000268:	f000 f976 	bl	8000558 <puts>

    /* Loop forever */
	for(;;);
 800026c:	e7fe      	b.n	800026c <main+0x18>
 800026e:	bf00      	nop
 8000270:	08000d88 	.word	0x08000d88
 8000274:	08000dac 	.word	0x08000dac

08000278 <RTC_WKUP_IRQHandler>:
}

void RTC_WKUP_IRQHandler (void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	printf("In handler mode :  ISR\n");
 800027c:	4802      	ldr	r0, [pc, #8]	; (8000288 <RTC_WKUP_IRQHandler+0x10>)
 800027e:	f000 f96b 	bl	8000558 <puts>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	08000dcc 	.word	0x08000dcc

0800028c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	printf("Inside HardFault handler\n");
 8000290:	4802      	ldr	r0, [pc, #8]	; (800029c <HardFault_Handler+0x10>)
 8000292:	f000 f961 	bl	8000558 <puts>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	08000de4 	.word	0x08000de4

080002a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	e00a      	b.n	80002c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002b2:	f3af 8000 	nop.w
 80002b6:	4601      	mov	r1, r0
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	1c5a      	adds	r2, r3, #1
 80002bc:	60ba      	str	r2, [r7, #8]
 80002be:	b2ca      	uxtb	r2, r1
 80002c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	3301      	adds	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	697a      	ldr	r2, [r7, #20]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	dbf0      	blt.n	80002b2 <_read+0x12>
	}

return len;
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	b086      	sub	sp, #24
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
 80002ea:	e009      	b.n	8000300 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	60ba      	str	r2, [r7, #8]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	3301      	adds	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	429a      	cmp	r2, r3
 8000306:	dbf1      	blt.n	80002ec <_write+0x12>
	}
	return len;
 8000308:	687b      	ldr	r3, [r7, #4]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <_close>:

int _close(int file)
{
 8000312:	b480      	push	{r7}
 8000314:	b083      	sub	sp, #12
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
	return -1;
 800031a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
 8000332:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800033a:	605a      	str	r2, [r3, #4]
	return 0;
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <_isatty>:

int _isatty(int file)
{
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
	return 1;
 8000352:	2301      	movs	r3, #1
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
	return 0;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
	...

0800037c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <_sbrk+0x5c>)
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <_sbrk+0x60>)
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <_sbrk+0x64>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d102      	bne.n	800039e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <_sbrk+0x64>)
 800039a:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <_sbrk+0x68>)
 800039c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <_sbrk+0x64>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	693a      	ldr	r2, [r7, #16]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d207      	bcs.n	80003bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003ac:	f000 f846 	bl	800043c <__errno>
 80003b0:	4602      	mov	r2, r0
 80003b2:	230c      	movs	r3, #12
 80003b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80003b6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ba:	e009      	b.n	80003d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <_sbrk+0x64>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003c2:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <_sbrk+0x64>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4413      	add	r3, r2
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <_sbrk+0x64>)
 80003cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003ce:	68fb      	ldr	r3, [r7, #12]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20020000 	.word	0x20020000
 80003dc:	00000400 	.word	0x00000400
 80003e0:	20000080 	.word	0x20000080
 80003e4:	20000090 	.word	0x20000090

080003e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	; (8000428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <LoopForever+0xe>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	; (8000434 <LoopForever+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000416:	f000 f817 	bl	8000448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041a:	f7ff ff1b 	bl	8000254 <main>

0800041e <LoopForever>:

LoopForever:
    b LoopForever
 800041e:	e7fe      	b.n	800041e <LoopForever>
  ldr   r0, =_estack
 8000420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800042c:	08000e6c 	.word	0x08000e6c
  ldr r2, =_sbss
 8000430:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000434:	20000090 	.word	0x20000090

08000438 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC_IRQHandler>
	...

0800043c <__errno>:
 800043c:	4b01      	ldr	r3, [pc, #4]	; (8000444 <__errno+0x8>)
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	20000000 	.word	0x20000000

08000448 <__libc_init_array>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	4e0d      	ldr	r6, [pc, #52]	; (8000480 <__libc_init_array+0x38>)
 800044c:	4c0d      	ldr	r4, [pc, #52]	; (8000484 <__libc_init_array+0x3c>)
 800044e:	1ba4      	subs	r4, r4, r6
 8000450:	10a4      	asrs	r4, r4, #2
 8000452:	2500      	movs	r5, #0
 8000454:	42a5      	cmp	r5, r4
 8000456:	d109      	bne.n	800046c <__libc_init_array+0x24>
 8000458:	4e0b      	ldr	r6, [pc, #44]	; (8000488 <__libc_init_array+0x40>)
 800045a:	4c0c      	ldr	r4, [pc, #48]	; (800048c <__libc_init_array+0x44>)
 800045c:	f000 fc88 	bl	8000d70 <_init>
 8000460:	1ba4      	subs	r4, r4, r6
 8000462:	10a4      	asrs	r4, r4, #2
 8000464:	2500      	movs	r5, #0
 8000466:	42a5      	cmp	r5, r4
 8000468:	d105      	bne.n	8000476 <__libc_init_array+0x2e>
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000470:	4798      	blx	r3
 8000472:	3501      	adds	r5, #1
 8000474:	e7ee      	b.n	8000454 <__libc_init_array+0xc>
 8000476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800047a:	4798      	blx	r3
 800047c:	3501      	adds	r5, #1
 800047e:	e7f2      	b.n	8000466 <__libc_init_array+0x1e>
 8000480:	08000e64 	.word	0x08000e64
 8000484:	08000e64 	.word	0x08000e64
 8000488:	08000e64 	.word	0x08000e64
 800048c:	08000e68 	.word	0x08000e68

08000490 <memset>:
 8000490:	4402      	add	r2, r0
 8000492:	4603      	mov	r3, r0
 8000494:	4293      	cmp	r3, r2
 8000496:	d100      	bne.n	800049a <memset+0xa>
 8000498:	4770      	bx	lr
 800049a:	f803 1b01 	strb.w	r1, [r3], #1
 800049e:	e7f9      	b.n	8000494 <memset+0x4>

080004a0 <_puts_r>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	460e      	mov	r6, r1
 80004a4:	4605      	mov	r5, r0
 80004a6:	b118      	cbz	r0, 80004b0 <_puts_r+0x10>
 80004a8:	6983      	ldr	r3, [r0, #24]
 80004aa:	b90b      	cbnz	r3, 80004b0 <_puts_r+0x10>
 80004ac:	f000 fa0c 	bl	80008c8 <__sinit>
 80004b0:	69ab      	ldr	r3, [r5, #24]
 80004b2:	68ac      	ldr	r4, [r5, #8]
 80004b4:	b913      	cbnz	r3, 80004bc <_puts_r+0x1c>
 80004b6:	4628      	mov	r0, r5
 80004b8:	f000 fa06 	bl	80008c8 <__sinit>
 80004bc:	4b23      	ldr	r3, [pc, #140]	; (800054c <_puts_r+0xac>)
 80004be:	429c      	cmp	r4, r3
 80004c0:	d117      	bne.n	80004f2 <_puts_r+0x52>
 80004c2:	686c      	ldr	r4, [r5, #4]
 80004c4:	89a3      	ldrh	r3, [r4, #12]
 80004c6:	071b      	lsls	r3, r3, #28
 80004c8:	d51d      	bpl.n	8000506 <_puts_r+0x66>
 80004ca:	6923      	ldr	r3, [r4, #16]
 80004cc:	b1db      	cbz	r3, 8000506 <_puts_r+0x66>
 80004ce:	3e01      	subs	r6, #1
 80004d0:	68a3      	ldr	r3, [r4, #8]
 80004d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80004d6:	3b01      	subs	r3, #1
 80004d8:	60a3      	str	r3, [r4, #8]
 80004da:	b9e9      	cbnz	r1, 8000518 <_puts_r+0x78>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da2e      	bge.n	800053e <_puts_r+0x9e>
 80004e0:	4622      	mov	r2, r4
 80004e2:	210a      	movs	r1, #10
 80004e4:	4628      	mov	r0, r5
 80004e6:	f000 f83f 	bl	8000568 <__swbuf_r>
 80004ea:	3001      	adds	r0, #1
 80004ec:	d011      	beq.n	8000512 <_puts_r+0x72>
 80004ee:	200a      	movs	r0, #10
 80004f0:	e011      	b.n	8000516 <_puts_r+0x76>
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <_puts_r+0xb0>)
 80004f4:	429c      	cmp	r4, r3
 80004f6:	d101      	bne.n	80004fc <_puts_r+0x5c>
 80004f8:	68ac      	ldr	r4, [r5, #8]
 80004fa:	e7e3      	b.n	80004c4 <_puts_r+0x24>
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <_puts_r+0xb4>)
 80004fe:	429c      	cmp	r4, r3
 8000500:	bf08      	it	eq
 8000502:	68ec      	ldreq	r4, [r5, #12]
 8000504:	e7de      	b.n	80004c4 <_puts_r+0x24>
 8000506:	4621      	mov	r1, r4
 8000508:	4628      	mov	r0, r5
 800050a:	f000 f87f 	bl	800060c <__swsetup_r>
 800050e:	2800      	cmp	r0, #0
 8000510:	d0dd      	beq.n	80004ce <_puts_r+0x2e>
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	2b00      	cmp	r3, #0
 800051a:	da04      	bge.n	8000526 <_puts_r+0x86>
 800051c:	69a2      	ldr	r2, [r4, #24]
 800051e:	429a      	cmp	r2, r3
 8000520:	dc06      	bgt.n	8000530 <_puts_r+0x90>
 8000522:	290a      	cmp	r1, #10
 8000524:	d004      	beq.n	8000530 <_puts_r+0x90>
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	6022      	str	r2, [r4, #0]
 800052c:	7019      	strb	r1, [r3, #0]
 800052e:	e7cf      	b.n	80004d0 <_puts_r+0x30>
 8000530:	4622      	mov	r2, r4
 8000532:	4628      	mov	r0, r5
 8000534:	f000 f818 	bl	8000568 <__swbuf_r>
 8000538:	3001      	adds	r0, #1
 800053a:	d1c9      	bne.n	80004d0 <_puts_r+0x30>
 800053c:	e7e9      	b.n	8000512 <_puts_r+0x72>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	200a      	movs	r0, #10
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	6022      	str	r2, [r4, #0]
 8000546:	7018      	strb	r0, [r3, #0]
 8000548:	e7e5      	b.n	8000516 <_puts_r+0x76>
 800054a:	bf00      	nop
 800054c:	08000e24 	.word	0x08000e24
 8000550:	08000e44 	.word	0x08000e44
 8000554:	08000e04 	.word	0x08000e04

08000558 <puts>:
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <puts+0xc>)
 800055a:	4601      	mov	r1, r0
 800055c:	6818      	ldr	r0, [r3, #0]
 800055e:	f7ff bf9f 	b.w	80004a0 <_puts_r>
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000

08000568 <__swbuf_r>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	460e      	mov	r6, r1
 800056c:	4614      	mov	r4, r2
 800056e:	4605      	mov	r5, r0
 8000570:	b118      	cbz	r0, 800057a <__swbuf_r+0x12>
 8000572:	6983      	ldr	r3, [r0, #24]
 8000574:	b90b      	cbnz	r3, 800057a <__swbuf_r+0x12>
 8000576:	f000 f9a7 	bl	80008c8 <__sinit>
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <__swbuf_r+0x98>)
 800057c:	429c      	cmp	r4, r3
 800057e:	d12a      	bne.n	80005d6 <__swbuf_r+0x6e>
 8000580:	686c      	ldr	r4, [r5, #4]
 8000582:	69a3      	ldr	r3, [r4, #24]
 8000584:	60a3      	str	r3, [r4, #8]
 8000586:	89a3      	ldrh	r3, [r4, #12]
 8000588:	071a      	lsls	r2, r3, #28
 800058a:	d52e      	bpl.n	80005ea <__swbuf_r+0x82>
 800058c:	6923      	ldr	r3, [r4, #16]
 800058e:	b363      	cbz	r3, 80005ea <__swbuf_r+0x82>
 8000590:	6923      	ldr	r3, [r4, #16]
 8000592:	6820      	ldr	r0, [r4, #0]
 8000594:	1ac0      	subs	r0, r0, r3
 8000596:	6963      	ldr	r3, [r4, #20]
 8000598:	b2f6      	uxtb	r6, r6
 800059a:	4283      	cmp	r3, r0
 800059c:	4637      	mov	r7, r6
 800059e:	dc04      	bgt.n	80005aa <__swbuf_r+0x42>
 80005a0:	4621      	mov	r1, r4
 80005a2:	4628      	mov	r0, r5
 80005a4:	f000 f926 	bl	80007f4 <_fflush_r>
 80005a8:	bb28      	cbnz	r0, 80005f6 <__swbuf_r+0x8e>
 80005aa:	68a3      	ldr	r3, [r4, #8]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	60a3      	str	r3, [r4, #8]
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	6022      	str	r2, [r4, #0]
 80005b6:	701e      	strb	r6, [r3, #0]
 80005b8:	6963      	ldr	r3, [r4, #20]
 80005ba:	3001      	adds	r0, #1
 80005bc:	4283      	cmp	r3, r0
 80005be:	d004      	beq.n	80005ca <__swbuf_r+0x62>
 80005c0:	89a3      	ldrh	r3, [r4, #12]
 80005c2:	07db      	lsls	r3, r3, #31
 80005c4:	d519      	bpl.n	80005fa <__swbuf_r+0x92>
 80005c6:	2e0a      	cmp	r6, #10
 80005c8:	d117      	bne.n	80005fa <__swbuf_r+0x92>
 80005ca:	4621      	mov	r1, r4
 80005cc:	4628      	mov	r0, r5
 80005ce:	f000 f911 	bl	80007f4 <_fflush_r>
 80005d2:	b190      	cbz	r0, 80005fa <__swbuf_r+0x92>
 80005d4:	e00f      	b.n	80005f6 <__swbuf_r+0x8e>
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__swbuf_r+0x9c>)
 80005d8:	429c      	cmp	r4, r3
 80005da:	d101      	bne.n	80005e0 <__swbuf_r+0x78>
 80005dc:	68ac      	ldr	r4, [r5, #8]
 80005de:	e7d0      	b.n	8000582 <__swbuf_r+0x1a>
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <__swbuf_r+0xa0>)
 80005e2:	429c      	cmp	r4, r3
 80005e4:	bf08      	it	eq
 80005e6:	68ec      	ldreq	r4, [r5, #12]
 80005e8:	e7cb      	b.n	8000582 <__swbuf_r+0x1a>
 80005ea:	4621      	mov	r1, r4
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 f80d 	bl	800060c <__swsetup_r>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d0cc      	beq.n	8000590 <__swbuf_r+0x28>
 80005f6:	f04f 37ff 	mov.w	r7, #4294967295
 80005fa:	4638      	mov	r0, r7
 80005fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005fe:	bf00      	nop
 8000600:	08000e24 	.word	0x08000e24
 8000604:	08000e44 	.word	0x08000e44
 8000608:	08000e04 	.word	0x08000e04

0800060c <__swsetup_r>:
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <__swsetup_r+0xcc>)
 800060e:	b570      	push	{r4, r5, r6, lr}
 8000610:	681d      	ldr	r5, [r3, #0]
 8000612:	4606      	mov	r6, r0
 8000614:	460c      	mov	r4, r1
 8000616:	b125      	cbz	r5, 8000622 <__swsetup_r+0x16>
 8000618:	69ab      	ldr	r3, [r5, #24]
 800061a:	b913      	cbnz	r3, 8000622 <__swsetup_r+0x16>
 800061c:	4628      	mov	r0, r5
 800061e:	f000 f953 	bl	80008c8 <__sinit>
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <__swsetup_r+0xd0>)
 8000624:	429c      	cmp	r4, r3
 8000626:	d10f      	bne.n	8000648 <__swsetup_r+0x3c>
 8000628:	686c      	ldr	r4, [r5, #4]
 800062a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800062e:	b29a      	uxth	r2, r3
 8000630:	0715      	lsls	r5, r2, #28
 8000632:	d42c      	bmi.n	800068e <__swsetup_r+0x82>
 8000634:	06d0      	lsls	r0, r2, #27
 8000636:	d411      	bmi.n	800065c <__swsetup_r+0x50>
 8000638:	2209      	movs	r2, #9
 800063a:	6032      	str	r2, [r6, #0]
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	81a3      	strh	r3, [r4, #12]
 8000642:	f04f 30ff 	mov.w	r0, #4294967295
 8000646:	e03e      	b.n	80006c6 <__swsetup_r+0xba>
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <__swsetup_r+0xd4>)
 800064a:	429c      	cmp	r4, r3
 800064c:	d101      	bne.n	8000652 <__swsetup_r+0x46>
 800064e:	68ac      	ldr	r4, [r5, #8]
 8000650:	e7eb      	b.n	800062a <__swsetup_r+0x1e>
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <__swsetup_r+0xd8>)
 8000654:	429c      	cmp	r4, r3
 8000656:	bf08      	it	eq
 8000658:	68ec      	ldreq	r4, [r5, #12]
 800065a:	e7e6      	b.n	800062a <__swsetup_r+0x1e>
 800065c:	0751      	lsls	r1, r2, #29
 800065e:	d512      	bpl.n	8000686 <__swsetup_r+0x7a>
 8000660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000662:	b141      	cbz	r1, 8000676 <__swsetup_r+0x6a>
 8000664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000668:	4299      	cmp	r1, r3
 800066a:	d002      	beq.n	8000672 <__swsetup_r+0x66>
 800066c:	4630      	mov	r0, r6
 800066e:	f000 fa19 	bl	8000aa4 <_free_r>
 8000672:	2300      	movs	r3, #0
 8000674:	6363      	str	r3, [r4, #52]	; 0x34
 8000676:	89a3      	ldrh	r3, [r4, #12]
 8000678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800067c:	81a3      	strh	r3, [r4, #12]
 800067e:	2300      	movs	r3, #0
 8000680:	6063      	str	r3, [r4, #4]
 8000682:	6923      	ldr	r3, [r4, #16]
 8000684:	6023      	str	r3, [r4, #0]
 8000686:	89a3      	ldrh	r3, [r4, #12]
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	81a3      	strh	r3, [r4, #12]
 800068e:	6923      	ldr	r3, [r4, #16]
 8000690:	b94b      	cbnz	r3, 80006a6 <__swsetup_r+0x9a>
 8000692:	89a3      	ldrh	r3, [r4, #12]
 8000694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800069c:	d003      	beq.n	80006a6 <__swsetup_r+0x9a>
 800069e:	4621      	mov	r1, r4
 80006a0:	4630      	mov	r0, r6
 80006a2:	f000 f9bf 	bl	8000a24 <__smakebuf_r>
 80006a6:	89a2      	ldrh	r2, [r4, #12]
 80006a8:	f012 0301 	ands.w	r3, r2, #1
 80006ac:	d00c      	beq.n	80006c8 <__swsetup_r+0xbc>
 80006ae:	2300      	movs	r3, #0
 80006b0:	60a3      	str	r3, [r4, #8]
 80006b2:	6963      	ldr	r3, [r4, #20]
 80006b4:	425b      	negs	r3, r3
 80006b6:	61a3      	str	r3, [r4, #24]
 80006b8:	6923      	ldr	r3, [r4, #16]
 80006ba:	b953      	cbnz	r3, 80006d2 <__swsetup_r+0xc6>
 80006bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80006c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80006c4:	d1ba      	bne.n	800063c <__swsetup_r+0x30>
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	0792      	lsls	r2, r2, #30
 80006ca:	bf58      	it	pl
 80006cc:	6963      	ldrpl	r3, [r4, #20]
 80006ce:	60a3      	str	r3, [r4, #8]
 80006d0:	e7f2      	b.n	80006b8 <__swsetup_r+0xac>
 80006d2:	2000      	movs	r0, #0
 80006d4:	e7f7      	b.n	80006c6 <__swsetup_r+0xba>
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000
 80006dc:	08000e24 	.word	0x08000e24
 80006e0:	08000e44 	.word	0x08000e44
 80006e4:	08000e04 	.word	0x08000e04

080006e8 <__sflush_r>:
 80006e8:	898a      	ldrh	r2, [r1, #12]
 80006ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ee:	4605      	mov	r5, r0
 80006f0:	0710      	lsls	r0, r2, #28
 80006f2:	460c      	mov	r4, r1
 80006f4:	d458      	bmi.n	80007a8 <__sflush_r+0xc0>
 80006f6:	684b      	ldr	r3, [r1, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dc05      	bgt.n	8000708 <__sflush_r+0x20>
 80006fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80006fe:	2b00      	cmp	r3, #0
 8000700:	dc02      	bgt.n	8000708 <__sflush_r+0x20>
 8000702:	2000      	movs	r0, #0
 8000704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800070a:	2e00      	cmp	r6, #0
 800070c:	d0f9      	beq.n	8000702 <__sflush_r+0x1a>
 800070e:	2300      	movs	r3, #0
 8000710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000714:	682f      	ldr	r7, [r5, #0]
 8000716:	6a21      	ldr	r1, [r4, #32]
 8000718:	602b      	str	r3, [r5, #0]
 800071a:	d032      	beq.n	8000782 <__sflush_r+0x9a>
 800071c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800071e:	89a3      	ldrh	r3, [r4, #12]
 8000720:	075a      	lsls	r2, r3, #29
 8000722:	d505      	bpl.n	8000730 <__sflush_r+0x48>
 8000724:	6863      	ldr	r3, [r4, #4]
 8000726:	1ac0      	subs	r0, r0, r3
 8000728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800072a:	b10b      	cbz	r3, 8000730 <__sflush_r+0x48>
 800072c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800072e:	1ac0      	subs	r0, r0, r3
 8000730:	2300      	movs	r3, #0
 8000732:	4602      	mov	r2, r0
 8000734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000736:	6a21      	ldr	r1, [r4, #32]
 8000738:	4628      	mov	r0, r5
 800073a:	47b0      	blx	r6
 800073c:	1c43      	adds	r3, r0, #1
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	d106      	bne.n	8000750 <__sflush_r+0x68>
 8000742:	6829      	ldr	r1, [r5, #0]
 8000744:	291d      	cmp	r1, #29
 8000746:	d848      	bhi.n	80007da <__sflush_r+0xf2>
 8000748:	4a29      	ldr	r2, [pc, #164]	; (80007f0 <__sflush_r+0x108>)
 800074a:	40ca      	lsrs	r2, r1
 800074c:	07d6      	lsls	r6, r2, #31
 800074e:	d544      	bpl.n	80007da <__sflush_r+0xf2>
 8000750:	2200      	movs	r2, #0
 8000752:	6062      	str	r2, [r4, #4]
 8000754:	04d9      	lsls	r1, r3, #19
 8000756:	6922      	ldr	r2, [r4, #16]
 8000758:	6022      	str	r2, [r4, #0]
 800075a:	d504      	bpl.n	8000766 <__sflush_r+0x7e>
 800075c:	1c42      	adds	r2, r0, #1
 800075e:	d101      	bne.n	8000764 <__sflush_r+0x7c>
 8000760:	682b      	ldr	r3, [r5, #0]
 8000762:	b903      	cbnz	r3, 8000766 <__sflush_r+0x7e>
 8000764:	6560      	str	r0, [r4, #84]	; 0x54
 8000766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000768:	602f      	str	r7, [r5, #0]
 800076a:	2900      	cmp	r1, #0
 800076c:	d0c9      	beq.n	8000702 <__sflush_r+0x1a>
 800076e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000772:	4299      	cmp	r1, r3
 8000774:	d002      	beq.n	800077c <__sflush_r+0x94>
 8000776:	4628      	mov	r0, r5
 8000778:	f000 f994 	bl	8000aa4 <_free_r>
 800077c:	2000      	movs	r0, #0
 800077e:	6360      	str	r0, [r4, #52]	; 0x34
 8000780:	e7c0      	b.n	8000704 <__sflush_r+0x1c>
 8000782:	2301      	movs	r3, #1
 8000784:	4628      	mov	r0, r5
 8000786:	47b0      	blx	r6
 8000788:	1c41      	adds	r1, r0, #1
 800078a:	d1c8      	bne.n	800071e <__sflush_r+0x36>
 800078c:	682b      	ldr	r3, [r5, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0c5      	beq.n	800071e <__sflush_r+0x36>
 8000792:	2b1d      	cmp	r3, #29
 8000794:	d001      	beq.n	800079a <__sflush_r+0xb2>
 8000796:	2b16      	cmp	r3, #22
 8000798:	d101      	bne.n	800079e <__sflush_r+0xb6>
 800079a:	602f      	str	r7, [r5, #0]
 800079c:	e7b1      	b.n	8000702 <__sflush_r+0x1a>
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	81a3      	strh	r3, [r4, #12]
 80007a6:	e7ad      	b.n	8000704 <__sflush_r+0x1c>
 80007a8:	690f      	ldr	r7, [r1, #16]
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d0a9      	beq.n	8000702 <__sflush_r+0x1a>
 80007ae:	0793      	lsls	r3, r2, #30
 80007b0:	680e      	ldr	r6, [r1, #0]
 80007b2:	bf08      	it	eq
 80007b4:	694b      	ldreq	r3, [r1, #20]
 80007b6:	600f      	str	r7, [r1, #0]
 80007b8:	bf18      	it	ne
 80007ba:	2300      	movne	r3, #0
 80007bc:	eba6 0807 	sub.w	r8, r6, r7
 80007c0:	608b      	str	r3, [r1, #8]
 80007c2:	f1b8 0f00 	cmp.w	r8, #0
 80007c6:	dd9c      	ble.n	8000702 <__sflush_r+0x1a>
 80007c8:	4643      	mov	r3, r8
 80007ca:	463a      	mov	r2, r7
 80007cc:	6a21      	ldr	r1, [r4, #32]
 80007ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80007d0:	4628      	mov	r0, r5
 80007d2:	47b0      	blx	r6
 80007d4:	2800      	cmp	r0, #0
 80007d6:	dc06      	bgt.n	80007e6 <__sflush_r+0xfe>
 80007d8:	89a3      	ldrh	r3, [r4, #12]
 80007da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007de:	81a3      	strh	r3, [r4, #12]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	e78e      	b.n	8000704 <__sflush_r+0x1c>
 80007e6:	4407      	add	r7, r0
 80007e8:	eba8 0800 	sub.w	r8, r8, r0
 80007ec:	e7e9      	b.n	80007c2 <__sflush_r+0xda>
 80007ee:	bf00      	nop
 80007f0:	20400001 	.word	0x20400001

080007f4 <_fflush_r>:
 80007f4:	b538      	push	{r3, r4, r5, lr}
 80007f6:	690b      	ldr	r3, [r1, #16]
 80007f8:	4605      	mov	r5, r0
 80007fa:	460c      	mov	r4, r1
 80007fc:	b1db      	cbz	r3, 8000836 <_fflush_r+0x42>
 80007fe:	b118      	cbz	r0, 8000808 <_fflush_r+0x14>
 8000800:	6983      	ldr	r3, [r0, #24]
 8000802:	b90b      	cbnz	r3, 8000808 <_fflush_r+0x14>
 8000804:	f000 f860 	bl	80008c8 <__sinit>
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <_fflush_r+0x48>)
 800080a:	429c      	cmp	r4, r3
 800080c:	d109      	bne.n	8000822 <_fflush_r+0x2e>
 800080e:	686c      	ldr	r4, [r5, #4]
 8000810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000814:	b17b      	cbz	r3, 8000836 <_fflush_r+0x42>
 8000816:	4621      	mov	r1, r4
 8000818:	4628      	mov	r0, r5
 800081a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800081e:	f7ff bf63 	b.w	80006e8 <__sflush_r>
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <_fflush_r+0x4c>)
 8000824:	429c      	cmp	r4, r3
 8000826:	d101      	bne.n	800082c <_fflush_r+0x38>
 8000828:	68ac      	ldr	r4, [r5, #8]
 800082a:	e7f1      	b.n	8000810 <_fflush_r+0x1c>
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <_fflush_r+0x50>)
 800082e:	429c      	cmp	r4, r3
 8000830:	bf08      	it	eq
 8000832:	68ec      	ldreq	r4, [r5, #12]
 8000834:	e7ec      	b.n	8000810 <_fflush_r+0x1c>
 8000836:	2000      	movs	r0, #0
 8000838:	bd38      	pop	{r3, r4, r5, pc}
 800083a:	bf00      	nop
 800083c:	08000e24 	.word	0x08000e24
 8000840:	08000e44 	.word	0x08000e44
 8000844:	08000e04 	.word	0x08000e04

08000848 <std>:
 8000848:	2300      	movs	r3, #0
 800084a:	b510      	push	{r4, lr}
 800084c:	4604      	mov	r4, r0
 800084e:	e9c0 3300 	strd	r3, r3, [r0]
 8000852:	6083      	str	r3, [r0, #8]
 8000854:	8181      	strh	r1, [r0, #12]
 8000856:	6643      	str	r3, [r0, #100]	; 0x64
 8000858:	81c2      	strh	r2, [r0, #14]
 800085a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800085e:	6183      	str	r3, [r0, #24]
 8000860:	4619      	mov	r1, r3
 8000862:	2208      	movs	r2, #8
 8000864:	305c      	adds	r0, #92	; 0x5c
 8000866:	f7ff fe13 	bl	8000490 <memset>
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <std+0x38>)
 800086c:	6263      	str	r3, [r4, #36]	; 0x24
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <std+0x3c>)
 8000870:	62a3      	str	r3, [r4, #40]	; 0x28
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <std+0x40>)
 8000874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <std+0x44>)
 8000878:	6224      	str	r4, [r4, #32]
 800087a:	6323      	str	r3, [r4, #48]	; 0x30
 800087c:	bd10      	pop	{r4, pc}
 800087e:	bf00      	nop
 8000880:	08000c15 	.word	0x08000c15
 8000884:	08000c37 	.word	0x08000c37
 8000888:	08000c6f 	.word	0x08000c6f
 800088c:	08000c93 	.word	0x08000c93

08000890 <_cleanup_r>:
 8000890:	4901      	ldr	r1, [pc, #4]	; (8000898 <_cleanup_r+0x8>)
 8000892:	f000 b885 	b.w	80009a0 <_fwalk_reent>
 8000896:	bf00      	nop
 8000898:	080007f5 	.word	0x080007f5

0800089c <__sfmoreglue>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	1e4a      	subs	r2, r1, #1
 80008a0:	2568      	movs	r5, #104	; 0x68
 80008a2:	4355      	muls	r5, r2
 80008a4:	460e      	mov	r6, r1
 80008a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008aa:	f000 f949 	bl	8000b40 <_malloc_r>
 80008ae:	4604      	mov	r4, r0
 80008b0:	b140      	cbz	r0, 80008c4 <__sfmoreglue+0x28>
 80008b2:	2100      	movs	r1, #0
 80008b4:	e9c0 1600 	strd	r1, r6, [r0]
 80008b8:	300c      	adds	r0, #12
 80008ba:	60a0      	str	r0, [r4, #8]
 80008bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008c0:	f7ff fde6 	bl	8000490 <memset>
 80008c4:	4620      	mov	r0, r4
 80008c6:	bd70      	pop	{r4, r5, r6, pc}

080008c8 <__sinit>:
 80008c8:	6983      	ldr	r3, [r0, #24]
 80008ca:	b510      	push	{r4, lr}
 80008cc:	4604      	mov	r4, r0
 80008ce:	bb33      	cbnz	r3, 800091e <__sinit+0x56>
 80008d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80008d4:	6503      	str	r3, [r0, #80]	; 0x50
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <__sinit+0x58>)
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <__sinit+0x5c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	6282      	str	r2, [r0, #40]	; 0x28
 80008de:	4298      	cmp	r0, r3
 80008e0:	bf04      	itt	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	6183      	streq	r3, [r0, #24]
 80008e6:	f000 f81f 	bl	8000928 <__sfp>
 80008ea:	6060      	str	r0, [r4, #4]
 80008ec:	4620      	mov	r0, r4
 80008ee:	f000 f81b 	bl	8000928 <__sfp>
 80008f2:	60a0      	str	r0, [r4, #8]
 80008f4:	4620      	mov	r0, r4
 80008f6:	f000 f817 	bl	8000928 <__sfp>
 80008fa:	2200      	movs	r2, #0
 80008fc:	60e0      	str	r0, [r4, #12]
 80008fe:	2104      	movs	r1, #4
 8000900:	6860      	ldr	r0, [r4, #4]
 8000902:	f7ff ffa1 	bl	8000848 <std>
 8000906:	2201      	movs	r2, #1
 8000908:	2109      	movs	r1, #9
 800090a:	68a0      	ldr	r0, [r4, #8]
 800090c:	f7ff ff9c 	bl	8000848 <std>
 8000910:	2202      	movs	r2, #2
 8000912:	2112      	movs	r1, #18
 8000914:	68e0      	ldr	r0, [r4, #12]
 8000916:	f7ff ff97 	bl	8000848 <std>
 800091a:	2301      	movs	r3, #1
 800091c:	61a3      	str	r3, [r4, #24]
 800091e:	bd10      	pop	{r4, pc}
 8000920:	08000e00 	.word	0x08000e00
 8000924:	08000891 	.word	0x08000891

08000928 <__sfp>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <__sfp+0x70>)
 800092c:	681e      	ldr	r6, [r3, #0]
 800092e:	69b3      	ldr	r3, [r6, #24]
 8000930:	4607      	mov	r7, r0
 8000932:	b913      	cbnz	r3, 800093a <__sfp+0x12>
 8000934:	4630      	mov	r0, r6
 8000936:	f7ff ffc7 	bl	80008c8 <__sinit>
 800093a:	3648      	adds	r6, #72	; 0x48
 800093c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000940:	3b01      	subs	r3, #1
 8000942:	d503      	bpl.n	800094c <__sfp+0x24>
 8000944:	6833      	ldr	r3, [r6, #0]
 8000946:	b133      	cbz	r3, 8000956 <__sfp+0x2e>
 8000948:	6836      	ldr	r6, [r6, #0]
 800094a:	e7f7      	b.n	800093c <__sfp+0x14>
 800094c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000950:	b16d      	cbz	r5, 800096e <__sfp+0x46>
 8000952:	3468      	adds	r4, #104	; 0x68
 8000954:	e7f4      	b.n	8000940 <__sfp+0x18>
 8000956:	2104      	movs	r1, #4
 8000958:	4638      	mov	r0, r7
 800095a:	f7ff ff9f 	bl	800089c <__sfmoreglue>
 800095e:	6030      	str	r0, [r6, #0]
 8000960:	2800      	cmp	r0, #0
 8000962:	d1f1      	bne.n	8000948 <__sfp+0x20>
 8000964:	230c      	movs	r3, #12
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	4604      	mov	r4, r0
 800096a:	4620      	mov	r0, r4
 800096c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <__sfp+0x74>)
 8000970:	6665      	str	r5, [r4, #100]	; 0x64
 8000972:	e9c4 5500 	strd	r5, r5, [r4]
 8000976:	60a5      	str	r5, [r4, #8]
 8000978:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800097c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000980:	2208      	movs	r2, #8
 8000982:	4629      	mov	r1, r5
 8000984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000988:	f7ff fd82 	bl	8000490 <memset>
 800098c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000994:	e7e9      	b.n	800096a <__sfp+0x42>
 8000996:	bf00      	nop
 8000998:	08000e00 	.word	0x08000e00
 800099c:	ffff0001 	.word	0xffff0001

080009a0 <_fwalk_reent>:
 80009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a4:	4680      	mov	r8, r0
 80009a6:	4689      	mov	r9, r1
 80009a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009ac:	2600      	movs	r6, #0
 80009ae:	b914      	cbnz	r4, 80009b6 <_fwalk_reent+0x16>
 80009b0:	4630      	mov	r0, r6
 80009b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80009ba:	3f01      	subs	r7, #1
 80009bc:	d501      	bpl.n	80009c2 <_fwalk_reent+0x22>
 80009be:	6824      	ldr	r4, [r4, #0]
 80009c0:	e7f5      	b.n	80009ae <_fwalk_reent+0xe>
 80009c2:	89ab      	ldrh	r3, [r5, #12]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d907      	bls.n	80009d8 <_fwalk_reent+0x38>
 80009c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009cc:	3301      	adds	r3, #1
 80009ce:	d003      	beq.n	80009d8 <_fwalk_reent+0x38>
 80009d0:	4629      	mov	r1, r5
 80009d2:	4640      	mov	r0, r8
 80009d4:	47c8      	blx	r9
 80009d6:	4306      	orrs	r6, r0
 80009d8:	3568      	adds	r5, #104	; 0x68
 80009da:	e7ee      	b.n	80009ba <_fwalk_reent+0x1a>

080009dc <__swhatbuf_r>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	460e      	mov	r6, r1
 80009e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009e4:	2900      	cmp	r1, #0
 80009e6:	b096      	sub	sp, #88	; 0x58
 80009e8:	4614      	mov	r4, r2
 80009ea:	461d      	mov	r5, r3
 80009ec:	da07      	bge.n	80009fe <__swhatbuf_r+0x22>
 80009ee:	2300      	movs	r3, #0
 80009f0:	602b      	str	r3, [r5, #0]
 80009f2:	89b3      	ldrh	r3, [r6, #12]
 80009f4:	061a      	lsls	r2, r3, #24
 80009f6:	d410      	bmi.n	8000a1a <__swhatbuf_r+0x3e>
 80009f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fc:	e00e      	b.n	8000a1c <__swhatbuf_r+0x40>
 80009fe:	466a      	mov	r2, sp
 8000a00:	f000 f96e 	bl	8000ce0 <_fstat_r>
 8000a04:	2800      	cmp	r0, #0
 8000a06:	dbf2      	blt.n	80009ee <__swhatbuf_r+0x12>
 8000a08:	9a01      	ldr	r2, [sp, #4]
 8000a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000a12:	425a      	negs	r2, r3
 8000a14:	415a      	adcs	r2, r3
 8000a16:	602a      	str	r2, [r5, #0]
 8000a18:	e7ee      	b.n	80009f8 <__swhatbuf_r+0x1c>
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	6023      	str	r3, [r4, #0]
 8000a20:	b016      	add	sp, #88	; 0x58
 8000a22:	bd70      	pop	{r4, r5, r6, pc}

08000a24 <__smakebuf_r>:
 8000a24:	898b      	ldrh	r3, [r1, #12]
 8000a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a28:	079d      	lsls	r5, r3, #30
 8000a2a:	4606      	mov	r6, r0
 8000a2c:	460c      	mov	r4, r1
 8000a2e:	d507      	bpl.n	8000a40 <__smakebuf_r+0x1c>
 8000a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000a34:	6023      	str	r3, [r4, #0]
 8000a36:	6123      	str	r3, [r4, #16]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	6163      	str	r3, [r4, #20]
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	ab01      	add	r3, sp, #4
 8000a42:	466a      	mov	r2, sp
 8000a44:	f7ff ffca 	bl	80009dc <__swhatbuf_r>
 8000a48:	9900      	ldr	r1, [sp, #0]
 8000a4a:	4605      	mov	r5, r0
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	f000 f877 	bl	8000b40 <_malloc_r>
 8000a52:	b948      	cbnz	r0, 8000a68 <__smakebuf_r+0x44>
 8000a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a58:	059a      	lsls	r2, r3, #22
 8000a5a:	d4ef      	bmi.n	8000a3c <__smakebuf_r+0x18>
 8000a5c:	f023 0303 	bic.w	r3, r3, #3
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	81a3      	strh	r3, [r4, #12]
 8000a66:	e7e3      	b.n	8000a30 <__smakebuf_r+0xc>
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <__smakebuf_r+0x7c>)
 8000a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000a6c:	89a3      	ldrh	r3, [r4, #12]
 8000a6e:	6020      	str	r0, [r4, #0]
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	81a3      	strh	r3, [r4, #12]
 8000a76:	9b00      	ldr	r3, [sp, #0]
 8000a78:	6163      	str	r3, [r4, #20]
 8000a7a:	9b01      	ldr	r3, [sp, #4]
 8000a7c:	6120      	str	r0, [r4, #16]
 8000a7e:	b15b      	cbz	r3, 8000a98 <__smakebuf_r+0x74>
 8000a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a84:	4630      	mov	r0, r6
 8000a86:	f000 f93d 	bl	8000d04 <_isatty_r>
 8000a8a:	b128      	cbz	r0, 8000a98 <__smakebuf_r+0x74>
 8000a8c:	89a3      	ldrh	r3, [r4, #12]
 8000a8e:	f023 0303 	bic.w	r3, r3, #3
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	81a3      	strh	r3, [r4, #12]
 8000a98:	89a3      	ldrh	r3, [r4, #12]
 8000a9a:	431d      	orrs	r5, r3
 8000a9c:	81a5      	strh	r5, [r4, #12]
 8000a9e:	e7cd      	b.n	8000a3c <__smakebuf_r+0x18>
 8000aa0:	08000891 	.word	0x08000891

08000aa4 <_free_r>:
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4605      	mov	r5, r0
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d045      	beq.n	8000b38 <_free_r+0x94>
 8000aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ab0:	1f0c      	subs	r4, r1, #4
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bfb8      	it	lt
 8000ab6:	18e4      	addlt	r4, r4, r3
 8000ab8:	f000 f946 	bl	8000d48 <__malloc_lock>
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <_free_r+0x98>)
 8000abe:	6813      	ldr	r3, [r2, #0]
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	b933      	cbnz	r3, 8000ad2 <_free_r+0x2e>
 8000ac4:	6063      	str	r3, [r4, #4]
 8000ac6:	6014      	str	r4, [r2, #0]
 8000ac8:	4628      	mov	r0, r5
 8000aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ace:	f000 b93c 	b.w	8000d4a <__malloc_unlock>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d90c      	bls.n	8000af0 <_free_r+0x4c>
 8000ad6:	6821      	ldr	r1, [r4, #0]
 8000ad8:	1862      	adds	r2, r4, r1
 8000ada:	4293      	cmp	r3, r2
 8000adc:	bf04      	itt	eq
 8000ade:	681a      	ldreq	r2, [r3, #0]
 8000ae0:	685b      	ldreq	r3, [r3, #4]
 8000ae2:	6063      	str	r3, [r4, #4]
 8000ae4:	bf04      	itt	eq
 8000ae6:	1852      	addeq	r2, r2, r1
 8000ae8:	6022      	streq	r2, [r4, #0]
 8000aea:	6004      	str	r4, [r0, #0]
 8000aec:	e7ec      	b.n	8000ac8 <_free_r+0x24>
 8000aee:	4613      	mov	r3, r2
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	b10a      	cbz	r2, 8000af8 <_free_r+0x54>
 8000af4:	42a2      	cmp	r2, r4
 8000af6:	d9fa      	bls.n	8000aee <_free_r+0x4a>
 8000af8:	6819      	ldr	r1, [r3, #0]
 8000afa:	1858      	adds	r0, r3, r1
 8000afc:	42a0      	cmp	r0, r4
 8000afe:	d10b      	bne.n	8000b18 <_free_r+0x74>
 8000b00:	6820      	ldr	r0, [r4, #0]
 8000b02:	4401      	add	r1, r0
 8000b04:	1858      	adds	r0, r3, r1
 8000b06:	4282      	cmp	r2, r0
 8000b08:	6019      	str	r1, [r3, #0]
 8000b0a:	d1dd      	bne.n	8000ac8 <_free_r+0x24>
 8000b0c:	6810      	ldr	r0, [r2, #0]
 8000b0e:	6852      	ldr	r2, [r2, #4]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	4401      	add	r1, r0
 8000b14:	6019      	str	r1, [r3, #0]
 8000b16:	e7d7      	b.n	8000ac8 <_free_r+0x24>
 8000b18:	d902      	bls.n	8000b20 <_free_r+0x7c>
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	602b      	str	r3, [r5, #0]
 8000b1e:	e7d3      	b.n	8000ac8 <_free_r+0x24>
 8000b20:	6820      	ldr	r0, [r4, #0]
 8000b22:	1821      	adds	r1, r4, r0
 8000b24:	428a      	cmp	r2, r1
 8000b26:	bf04      	itt	eq
 8000b28:	6811      	ldreq	r1, [r2, #0]
 8000b2a:	6852      	ldreq	r2, [r2, #4]
 8000b2c:	6062      	str	r2, [r4, #4]
 8000b2e:	bf04      	itt	eq
 8000b30:	1809      	addeq	r1, r1, r0
 8000b32:	6021      	streq	r1, [r4, #0]
 8000b34:	605c      	str	r4, [r3, #4]
 8000b36:	e7c7      	b.n	8000ac8 <_free_r+0x24>
 8000b38:	bd38      	pop	{r3, r4, r5, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000084 	.word	0x20000084

08000b40 <_malloc_r>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	1ccd      	adds	r5, r1, #3
 8000b44:	f025 0503 	bic.w	r5, r5, #3
 8000b48:	3508      	adds	r5, #8
 8000b4a:	2d0c      	cmp	r5, #12
 8000b4c:	bf38      	it	cc
 8000b4e:	250c      	movcc	r5, #12
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	4606      	mov	r6, r0
 8000b54:	db01      	blt.n	8000b5a <_malloc_r+0x1a>
 8000b56:	42a9      	cmp	r1, r5
 8000b58:	d903      	bls.n	8000b62 <_malloc_r+0x22>
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	6033      	str	r3, [r6, #0]
 8000b5e:	2000      	movs	r0, #0
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
 8000b62:	f000 f8f1 	bl	8000d48 <__malloc_lock>
 8000b66:	4a21      	ldr	r2, [pc, #132]	; (8000bec <_malloc_r+0xac>)
 8000b68:	6814      	ldr	r4, [r2, #0]
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	b991      	cbnz	r1, 8000b94 <_malloc_r+0x54>
 8000b6e:	4c20      	ldr	r4, [pc, #128]	; (8000bf0 <_malloc_r+0xb0>)
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	b91b      	cbnz	r3, 8000b7c <_malloc_r+0x3c>
 8000b74:	4630      	mov	r0, r6
 8000b76:	f000 f83d 	bl	8000bf4 <_sbrk_r>
 8000b7a:	6020      	str	r0, [r4, #0]
 8000b7c:	4629      	mov	r1, r5
 8000b7e:	4630      	mov	r0, r6
 8000b80:	f000 f838 	bl	8000bf4 <_sbrk_r>
 8000b84:	1c43      	adds	r3, r0, #1
 8000b86:	d124      	bne.n	8000bd2 <_malloc_r+0x92>
 8000b88:	230c      	movs	r3, #12
 8000b8a:	6033      	str	r3, [r6, #0]
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f000 f8dc 	bl	8000d4a <__malloc_unlock>
 8000b92:	e7e4      	b.n	8000b5e <_malloc_r+0x1e>
 8000b94:	680b      	ldr	r3, [r1, #0]
 8000b96:	1b5b      	subs	r3, r3, r5
 8000b98:	d418      	bmi.n	8000bcc <_malloc_r+0x8c>
 8000b9a:	2b0b      	cmp	r3, #11
 8000b9c:	d90f      	bls.n	8000bbe <_malloc_r+0x7e>
 8000b9e:	600b      	str	r3, [r1, #0]
 8000ba0:	50cd      	str	r5, [r1, r3]
 8000ba2:	18cc      	adds	r4, r1, r3
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f000 f8d0 	bl	8000d4a <__malloc_unlock>
 8000baa:	f104 000b 	add.w	r0, r4, #11
 8000bae:	1d23      	adds	r3, r4, #4
 8000bb0:	f020 0007 	bic.w	r0, r0, #7
 8000bb4:	1ac3      	subs	r3, r0, r3
 8000bb6:	d0d3      	beq.n	8000b60 <_malloc_r+0x20>
 8000bb8:	425a      	negs	r2, r3
 8000bba:	50e2      	str	r2, [r4, r3]
 8000bbc:	e7d0      	b.n	8000b60 <_malloc_r+0x20>
 8000bbe:	428c      	cmp	r4, r1
 8000bc0:	684b      	ldr	r3, [r1, #4]
 8000bc2:	bf16      	itet	ne
 8000bc4:	6063      	strne	r3, [r4, #4]
 8000bc6:	6013      	streq	r3, [r2, #0]
 8000bc8:	460c      	movne	r4, r1
 8000bca:	e7eb      	b.n	8000ba4 <_malloc_r+0x64>
 8000bcc:	460c      	mov	r4, r1
 8000bce:	6849      	ldr	r1, [r1, #4]
 8000bd0:	e7cc      	b.n	8000b6c <_malloc_r+0x2c>
 8000bd2:	1cc4      	adds	r4, r0, #3
 8000bd4:	f024 0403 	bic.w	r4, r4, #3
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d005      	beq.n	8000be8 <_malloc_r+0xa8>
 8000bdc:	1a21      	subs	r1, r4, r0
 8000bde:	4630      	mov	r0, r6
 8000be0:	f000 f808 	bl	8000bf4 <_sbrk_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	d0cf      	beq.n	8000b88 <_malloc_r+0x48>
 8000be8:	6025      	str	r5, [r4, #0]
 8000bea:	e7db      	b.n	8000ba4 <_malloc_r+0x64>
 8000bec:	20000084 	.word	0x20000084
 8000bf0:	20000088 	.word	0x20000088

08000bf4 <_sbrk_r>:
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	4c06      	ldr	r4, [pc, #24]	; (8000c10 <_sbrk_r+0x1c>)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4605      	mov	r5, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	6023      	str	r3, [r4, #0]
 8000c00:	f7ff fbbc 	bl	800037c <_sbrk>
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	d102      	bne.n	8000c0e <_sbrk_r+0x1a>
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	b103      	cbz	r3, 8000c0e <_sbrk_r+0x1a>
 8000c0c:	602b      	str	r3, [r5, #0]
 8000c0e:	bd38      	pop	{r3, r4, r5, pc}
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <__sread>:
 8000c14:	b510      	push	{r4, lr}
 8000c16:	460c      	mov	r4, r1
 8000c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c1c:	f000 f896 	bl	8000d4c <_read_r>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	bfab      	itete	ge
 8000c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c26:	89a3      	ldrhlt	r3, [r4, #12]
 8000c28:	181b      	addge	r3, r3, r0
 8000c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c2e:	bfac      	ite	ge
 8000c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8000c32:	81a3      	strhlt	r3, [r4, #12]
 8000c34:	bd10      	pop	{r4, pc}

08000c36 <__swrite>:
 8000c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3a:	461f      	mov	r7, r3
 8000c3c:	898b      	ldrh	r3, [r1, #12]
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	4605      	mov	r5, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	4616      	mov	r6, r2
 8000c46:	d505      	bpl.n	8000c54 <__swrite+0x1e>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c50:	f000 f868 	bl	8000d24 <_lseek_r>
 8000c54:	89a3      	ldrh	r3, [r4, #12]
 8000c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c5e:	81a3      	strh	r3, [r4, #12]
 8000c60:	4632      	mov	r2, r6
 8000c62:	463b      	mov	r3, r7
 8000c64:	4628      	mov	r0, r5
 8000c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c6a:	f000 b817 	b.w	8000c9c <_write_r>

08000c6e <__sseek>:
 8000c6e:	b510      	push	{r4, lr}
 8000c70:	460c      	mov	r4, r1
 8000c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c76:	f000 f855 	bl	8000d24 <_lseek_r>
 8000c7a:	1c43      	adds	r3, r0, #1
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	bf15      	itete	ne
 8000c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c8a:	81a3      	strheq	r3, [r4, #12]
 8000c8c:	bf18      	it	ne
 8000c8e:	81a3      	strhne	r3, [r4, #12]
 8000c90:	bd10      	pop	{r4, pc}

08000c92 <__sclose>:
 8000c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c96:	f000 b813 	b.w	8000cc0 <_close_r>
	...

08000c9c <_write_r>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4c07      	ldr	r4, [pc, #28]	; (8000cbc <_write_r+0x20>)
 8000ca0:	4605      	mov	r5, r0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	6022      	str	r2, [r4, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	f7ff fb15 	bl	80002da <_write>
 8000cb0:	1c43      	adds	r3, r0, #1
 8000cb2:	d102      	bne.n	8000cba <_write_r+0x1e>
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	b103      	cbz	r3, 8000cba <_write_r+0x1e>
 8000cb8:	602b      	str	r3, [r5, #0]
 8000cba:	bd38      	pop	{r3, r4, r5, pc}
 8000cbc:	2000008c 	.word	0x2000008c

08000cc0 <_close_r>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4c06      	ldr	r4, [pc, #24]	; (8000cdc <_close_r+0x1c>)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4605      	mov	r5, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	6023      	str	r3, [r4, #0]
 8000ccc:	f7ff fb21 	bl	8000312 <_close>
 8000cd0:	1c43      	adds	r3, r0, #1
 8000cd2:	d102      	bne.n	8000cda <_close_r+0x1a>
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	b103      	cbz	r3, 8000cda <_close_r+0x1a>
 8000cd8:	602b      	str	r3, [r5, #0]
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	2000008c 	.word	0x2000008c

08000ce0 <_fstat_r>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	4c07      	ldr	r4, [pc, #28]	; (8000d00 <_fstat_r+0x20>)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4605      	mov	r5, r0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	4611      	mov	r1, r2
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	f7ff fb1c 	bl	800032a <_fstat>
 8000cf2:	1c43      	adds	r3, r0, #1
 8000cf4:	d102      	bne.n	8000cfc <_fstat_r+0x1c>
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	b103      	cbz	r3, 8000cfc <_fstat_r+0x1c>
 8000cfa:	602b      	str	r3, [r5, #0]
 8000cfc:	bd38      	pop	{r3, r4, r5, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000008c 	.word	0x2000008c

08000d04 <_isatty_r>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4c06      	ldr	r4, [pc, #24]	; (8000d20 <_isatty_r+0x1c>)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4605      	mov	r5, r0
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	6023      	str	r3, [r4, #0]
 8000d10:	f7ff fb1b 	bl	800034a <_isatty>
 8000d14:	1c43      	adds	r3, r0, #1
 8000d16:	d102      	bne.n	8000d1e <_isatty_r+0x1a>
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	b103      	cbz	r3, 8000d1e <_isatty_r+0x1a>
 8000d1c:	602b      	str	r3, [r5, #0]
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
 8000d20:	2000008c 	.word	0x2000008c

08000d24 <_lseek_r>:
 8000d24:	b538      	push	{r3, r4, r5, lr}
 8000d26:	4c07      	ldr	r4, [pc, #28]	; (8000d44 <_lseek_r+0x20>)
 8000d28:	4605      	mov	r5, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6022      	str	r2, [r4, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f7ff fb14 	bl	8000360 <_lseek>
 8000d38:	1c43      	adds	r3, r0, #1
 8000d3a:	d102      	bne.n	8000d42 <_lseek_r+0x1e>
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	b103      	cbz	r3, 8000d42 <_lseek_r+0x1e>
 8000d40:	602b      	str	r3, [r5, #0]
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
 8000d44:	2000008c 	.word	0x2000008c

08000d48 <__malloc_lock>:
 8000d48:	4770      	bx	lr

08000d4a <__malloc_unlock>:
 8000d4a:	4770      	bx	lr

08000d4c <_read_r>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4c07      	ldr	r4, [pc, #28]	; (8000d6c <_read_r+0x20>)
 8000d50:	4605      	mov	r5, r0
 8000d52:	4608      	mov	r0, r1
 8000d54:	4611      	mov	r1, r2
 8000d56:	2200      	movs	r2, #0
 8000d58:	6022      	str	r2, [r4, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f7ff faa0 	bl	80002a0 <_read>
 8000d60:	1c43      	adds	r3, r0, #1
 8000d62:	d102      	bne.n	8000d6a <_read_r+0x1e>
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	b103      	cbz	r3, 8000d6a <_read_r+0x1e>
 8000d68:	602b      	str	r3, [r5, #0]
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
 8000d6c:	2000008c 	.word	0x2000008c

08000d70 <_init>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	bf00      	nop
 8000d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d76:	bc08      	pop	{r3}
 8000d78:	469e      	mov	lr, r3
 8000d7a:	4770      	bx	lr

08000d7c <_fini>:
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	bf00      	nop
 8000d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d82:	bc08      	pop	{r3}
 8000d84:	469e      	mov	lr, r3
 8000d86:	4770      	bx	lr
